# ==================== PROBING AND LEVELING ====================
# ==================== macros/probing.cfg ====================
# Probe operations, QGL, and nozzle cleaning

[gcode_macro _PROBE_WITH_RETRY]
description: Probe with automatic retry on failure
gcode:
    {% set retry_count = printer['gcode_macro _global_var'].probe_retry_count|int %}
    {% set retry_delay = printer['gcode_macro _global_var'].probe_retry_delay|int %}
    {% set probe_cmd = params.PROBE_CMD|default("PROBE")|string %}
    
    RESPOND TYPE=command MSG="action:probe_attempt_1"
    {probe_cmd}
    
    {% if printer.probe.last_query %}
        {% if retry_count > 1 %}
            _LOG_WARNING MSG="Probe attempt 2 of {retry_count}" LED=busy
            G4 P{retry_delay * 1000}
            RESPOND TYPE=command MSG="action:probe_attempt_2"
            {probe_cmd}
            
            {% if printer.probe.last_query %}
                {% if retry_count > 2 %}
                    _LOG_WARNING MSG="Probe attempt 3 of {retry_count}" LED=busy
                    G4 P{retry_delay * 1000}
                    RESPOND TYPE=command MSG="action:probe_attempt_3"
                    {probe_cmd}
                    
                    {% if printer.probe.last_query %}
                        _LOG_ERROR MSG="Probe failed after {retry_count} attempts"
                        CANCEL_PRINT
                    {% else %}
                        _LOG_STATUS MSG="Probe successful on attempt 3" LED=ready
                    {% endif %}
                {% else %}
                    _LOG_ERROR MSG="Probe failed after 2 attempts"
                    CANCEL_PRINT
                {% endif %}
            {% else %}
                _LOG_STATUS MSG="Probe successful on attempt 2" LED=ready
            {% endif %}
        {% else %}
            _LOG_ERROR MSG="Probe failed after 1 attempt"
            CANCEL_PRINT
        {% endif %}
    {% else %}
        _LOG_STATUS MSG="Probe successful on attempt 1" LED=ready
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with LED status and optional Z home skip
gcode:
    {% set skip_final_z_home = params.SKIP_FINAL_Z_HOME|default(0)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_QGL
    status_leveling
    
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Full homing required for QGL" LED=homing
        G28
    {% elif 'z' not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Homing Z axis for QGL" LED=homing
        G28 Z
    {% endif %}
    
    {% if not printer.quad_gantry_level.applied %}
        _LOG_STATUS MSG="Starting quad gantry leveling process" LED=leveling
        _LOG_STATUS MSG="QGL coarse pass (tolerance: 0.1mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=0.1
        
        _LOG_STATUS MSG="QGL fine pass (tolerance: 0.02mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerance=0.02
        
        _LOG_STATUS MSG="QGL completed successfully" LED=ready
    {% else %}
        _LOG_STATUS MSG="QGL already applied, skipping leveling process" LED=ready
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle with LED status and smart Z homing
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    status_cleaning
    
    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set clean_pos = printer['gcode_macro _global_var'].cleaning_position %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Get brush parameters from globals
    {% set brush = printer['gcode_macro _global_var'].brush_bounds %}
    {% set brush_z = printer['gcode_macro _global_var'].brush_z_heights %}
    {% set brush_speeds = printer['gcode_macro _global_var'].brush_speeds %}
    {% set safe_offset = printer['gcode_macro _global_var'].brush_safe_offset %}
    
    _LOG_STATUS MSG="Starting nozzle cleaning sequence" LED=cleaning
    
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            _LOG_STATUS MSG="Homing all axes for nozzle cleaning" LED=homing
            G28
            _LOG_STATUS MSG="All axes homed successfully" LED=cleaning
        {% else %}
            {% if not 'z' in printer.toolhead.homed_axes %}
                _LOG_STATUS MSG="Homing Z axis for nozzle cleaning" LED=homing
                G28 Z
                _LOG_STATUS MSG="Z axis homed successfully" LED=cleaning
            {% endif %}
        {% endif %}
    {% endif %}
    
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            _LOG_STATUS MSG="Performing Z-tilt adjustment for cleaning" LED=leveling
            Z_TILT_ADJUST
            G28 Z
            _LOG_STATUS MSG="Z-tilt adjustment completed" LED=cleaning
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            _LOG_STATUS MSG="Performing Quad Gantry Level for cleaning" LED=leveling
            QUAD_GANTRY_LEVEL SKIP_FINAL_Z_HOME=1
            _LOG_STATUS MSG="Quad Gantry Level completed" LED=cleaning
        {% endif %}
    {% endif %}
    
    _LOG_STATUS MSG="Moving to cleaning position" LED=cleaning
    G90
    # Move to safe position above brush
    G1 X{brush.x_min + safe_offset} Y{brush.y_min} Z10 F{brush_speeds.travel}
    
    _HEAT_FOR_FILAMENT TEMP={cleaning_temp} OPERATION="nozzle cleaning"
    
    G91
    G90
    M106 S127
    
    _LOG_STATUS MSG="Performing {wipes} cleaning cycles" LED=cleaning
    
    # Start cleaning sequence
    {% for wipe in range(wipes) %}
        {% if wipe % 2 == 0 %}
            _LOG_STATUS MSG="Cleaning cycle {wipe + 1}/{wipes}" LED=cleaning
        {% endif %}
        
        # Linear cleaning pattern at different Z heights
        {% for z_level in ['light', 'medium', 'deep'] %}
            G1 Z{brush_z[z_level]} F{brush_speeds.z_move}
            
            # Wipe left to right across front
            G1 X{brush.x_min} Y{brush.y_min} F{brush_speeds.travel}
            G1 X{brush.x_max} F{brush_speeds.wipe * 60}
            
            # Wipe front to back at right side
            G1 Y{brush.y_max} F{brush_speeds.wipe * 60}
            
            # Wipe right to left across back
            G1 X{brush.x_min} F{brush_speeds.wipe * 60}
            
            # Wipe back to front at left side
            G1 Y{brush.y_min} F{brush_speeds.wipe * 60}
        {% endfor %}
        
        # Diagonal cleaning pattern (every other wipe)
        {% if wipe % 2 == 1 %}
            {% for z_level in ['light', 'medium'] %}
                G1 Z{brush_z[z_level]} F{brush_speeds.z_move}
                
                # Diagonal wipes
                G1 X{brush.x_min} Y{brush.y_min} F{brush_speeds.travel}
                G1 X{brush.x_max} Y{brush.y_max} F{brush_speeds.wipe * 60}
                G1 X{brush.x_min} Y{brush.y_max} F{brush_speeds.wipe * 60}
                G1 X{brush.x_max} Y{brush.y_min} F{brush_speeds.wipe * 60}
            {% endfor %}
        {% endif %}
    {% endfor %}
    
    # Final position at safe height
    G1 Z{brush_z.light} F{brush_speeds.z_move}
    G1 X{brush.x_min + safe_offset} Y{brush.y_min} F{brush_speeds.travel}
    M400
    _LOG_STATUS MSG="Nozzle cleaning completed" LED=ready
    M107
    
    _LOG_STATUS MSG="Returning to safe position" LED=ready
    G91
    G1 Z10 F{brush_speeds.z_move}
    G90
    G28 Z
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE