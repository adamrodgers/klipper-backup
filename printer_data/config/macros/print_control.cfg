# ==================== PRINT CONTROL MACROS ====================
# ==================== macros/print_control.cfg ====================
# Main print control operations: start, end, pause, resume, cancel

[gcode_macro START_PRINT]
description: Optimized start print sequence with material-based chamber control
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
gcode:
    mainled_on
    status_busy
    
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(true)|int %}
    {% set material = params.MATERIAL|default("PLA")|string|upper %}
    
    # Get chamber target from material lookup table
    {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
    {% set chamber_target = filament_temps[material]|default(0) %}
    _LOG_STATUS MSG="Material={material}, Chamber target={chamber_target}°C"
    
    {% set prime_amount = printer['gcode_macro _global_var'].prime_amount|float %}
    
    # Clear any previous M141 settings to avoid conflicts
    SET_GCODE_VARIABLE MACRO=_CHAMBER_CONTROL VARIABLE=target_temp VALUE=0
    
    M400
    CLEAR_PAUSE
    BED_MESH_CLEAR
    G90
    
    {% if state == 'Prepare' %}
        _LOG_STATUS MSG="Preparing printer for {material} print (chamber: {chamber_target}°C)" LED=busy
        
        {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
              printer['filament_motion_sensor encoder_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="No filament detected - print cancelled"
            CANCEL_PRINT
        {% endif %}
        
        # For materials requiring chamber heating, do chamber conditioning FIRST
        {% if chamber_target > 0 and heatsoak == true %}
            # Set bed to proper temperature for chamber heating (100°C minimum for enclosed materials)
            {% set chamber_bed_temp = [bedtemp, 100]|max %}
            _LOG_STATUS MSG="Starting bed heating for chamber conditioning" LED=heating
            M140 S{chamber_bed_temp}
            
            # Don't heat nozzle during chamber conditioning - wait until after probing
            
            {% if printer.heater_bed.temperature < chamber_bed_temp %}
                _LOG_STATUS MSG="Waiting for bed to reach {chamber_bed_temp}°C for chamber heating" LED=heating
                M190 S{chamber_bed_temp}
            {% endif %}
            
            # Do chamber conditioning with heat soak
            _HEAT_SOAK_CHAMBER BED_TEMP={chamber_bed_temp} MATERIAL={material} CHAMBER={chamber_target}
            
        {% else %}
            # No chamber heating required - start bed heating but don't heat nozzle yet
            _LOG_STATUS MSG="Starting bed heating (no chamber required)" LED=heating
            M140 S{bedtemp}
            
            {% if printer.heater_bed.temperature < bedtemp %}
                _LOG_STATUS MSG="Waiting for bed to reach {bedtemp}°C" LED=heating
                M190 S{bedtemp}
            {% endif %}
            
            {% if heatsoak == true %}
                _HEAT_SOAK_CHAMBER BED_TEMP={bedtemp} MATERIAL={material} CHAMBER={chamber_target}
            {% endif %}
        {% endif %}
        
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            _LOG_STATUS MSG="Performing quad gantry leveling" LED=leveling
            QUAD_GANTRY_LEVEL
            _LOG_STATUS MSG="Homing Z after QGL" LED=homing
            G28 Z
        {% endif %}

        # Heat nozzle to 150°C for accurate probing and cleaning
        #_LOG_STATUS MSG="Heating nozzle to 150°C for initial probe and clean" LED=heating
        #M109 S150
        
        #_LOG_STATUS MSG="Beacon Contact Calibrate" LED=busy
        #G28 Z METHOD=CONTACT CALIBRATE=1

        #_LOG_STATUS MSG="Starting nozzle cleaning" LED=cleaning
        #CLEAN_NOZZLE
        
        # Heat nozzle to 150°C for accurate probing
        _LOG_STATUS MSG="Heating nozzle to 150°C for final probe and mesh" LED=heating
        M109 S150
        
        _LOG_STATUS MSG="Beacon Contact Calibrate" LED=busy
        G28 Z METHOD=CONTACT CALIBRATE=1

        _LOG_STATUS MSG="Beacon Bed Meshing" LED=meshing
        BED_MESH_CALIBRATE ADAPTIVE=1
        
        # This should happen automatically, but forcing
        # bed mesh saving/loading to clear random issues.
        BED_MESH_PROFILE SAVE=adaptivemesh
        BED_MESH_PROFILE LOAD=adaptivemesh
        
        M400
        
        _LOG_STATUS MSG="Smart parking" LED=busy
        SMART_PARK
        
        # NOW start heating nozzle after all probing is complete
        _LOG_STATUS MSG="Heating nozzle to {hotendtemp}°C for printing" LED=heating
        M109 S{hotendtemp}
        
        _LOG_STATUS MSG="Priming nozzle with {prime_amount}mm of filament" LED=busy
        G1 E{prime_amount} F300

        #SET_GCODE_OFFSET Z=0.03
        
        _LOG_STATUS MSG="Performing line purge" LED=busy
        LINE_PURGE

        SET_FAN_SPEED FAN=hotend_cooling_fan SPEED={printer['gcode_macro _global_var'].hotend_cooling_fan_speed}
        
        # Set LED to printing status (white) and keep it there
        status_printing
        _LOG_STATUS MSG="Print started successfully - LED set to white for printing"
    {% endif %}

[gcode_macro END_PRINT]
description: Print completion sequence with LED status
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}
    
    status_busy
    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0
    
    _LOG_STATUS MSG="Print completed - finalizing" LED=busy
    G91
    {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
          printer['filament_motion_sensor encoder_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}
    
    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y348 F9000
    
    _ALL_FAN_OFF
    TURN_OFF_HEATERS
    
    M84 X Y Z E
    M220 S100
    M221 S100
    
    CLEAR_PAUSE
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    BED_MESH_CLEAR
    
    # Set to bright green (completed) and hold it for 5 seconds, then go to white
    status_completed
    _LOG_STATUS MSG="Print completed successfully - printer ready"
    G4 P5000
    status_white

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
        {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
        
        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        _LOG_STATUS MSG="Pausing print - state: {state}" LED=paused
        
        PAUSE_BASE
        status_paused
        
        PARK_FOR_PAUSE
        
        M104 S{printer.extruder.target}
        
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
                      printer['filament_motion_sensor encoder_sensor'].filament_detected == true
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_motion_sensor encoder_sensor'].enabled == true and
                        printer['filament_motion_sensor encoder_sensor'].filament_detected != true %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-{unload_retract} F300
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+{filament_change_retract} F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-{unload_retract} F300
                G90
            {% endif %}
        {% endif %}
        
        _LOG_STATUS MSG="Print paused successfully" LED=paused
    {% else %}
        _LOG_WARNING MSG="Print already paused"
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print with LED status
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}
    
    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
    
    {% if state == 'filament_change' %}
        {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
              printer['filament_motion_sensor encoder_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                status_busy
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                _LOG_STATUS MSG="Heating nozzle to {extruder_target_temp}°C for filament change" LED=heating
                M109 S{extruder_target_temp}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% endif %}
            status_printing
            _LOG_STATUS MSG="Resuming print after filament change"
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
              printer['filament_motion_sensor encoder_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            G91
            G1 E{e_restract} F300
            G90
            status_printing
            _LOG_STATUS MSG="Resuming print from pause"
            RESUME_BASE
            SET_FAN_SPEED FAN=hotend_cooling_fan SPEED={printer['gcode_macro _global_var'].hotend_cooling_fan_speed}
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel print with LED status
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}
    
    CANCEL_PRINT_BASE
    status_busy
    
    _LOG_STATUS MSG="Print cancellation initiated" LED=busy
    G91
    {% if printer['filament_motion_sensor encoder_sensor'].enabled == true and
          printer['filament_motion_sensor encoder_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            _LOG_WARNING MSG="Nozzle not hot enough for retraction"
        {% endif %}
    {% endif %}
    
    PARK_FOR_CANCEL
    
    TURN_OFF_HEATERS
    _ALL_FAN_OFF
    
    CLEAR_PAUSE
    M84 X Y Z E
    
    _LOG_STATUS MSG="Print cancelled successfully - printer ready" LED=ready
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change