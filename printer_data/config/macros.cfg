# ==================== LED CONTROLS ====================
[gcode_macro mainled_on]
gcode:
    SET_LED LED=main_led WHITE=1

[gcode_macro mainled_off]
gcode:
    SET_LED LED=main_led WHITE=0

# ==================== SYSTEM CONFIGURATION ====================
[force_move]
enable_force_move: true

# ==================== ENHANCED HELPER MACROS FOR MESSAGES ====================
[gcode_macro _LOG_STATUS]
description: Consistent status logging with display, console output, and LED status
gcode:
    {% set msg = params.MSG|default("Status update")|string %}
    {% set led_status = params.LED|default("")|string %}
    
    # Display and console output
    M117 {msg}
    RESPOND TYPE=echo MSG="STATUS: {msg}"
    
    # Set LED status if provided
    {% if led_status != "" %}
        {% if led_status in printer["gcode_macro _led_vars"].colors %}
            _set_hotend_led_by_name COLOR={led_status}
        {% endif %}
    {% endif %}

[gcode_macro _LOG_ERROR]
description: Error logging with display, console output, and error LED
gcode:
    {% set msg = params.MSG|default("Error occurred")|string %}
    
    # Display and console output
    M117 ERROR: {msg}
    RESPOND TYPE=error MSG="ERROR: {msg}"
    
    # Set error LED status
    status_error

[gcode_macro _LOG_WARNING]
description: Warning logging with display, console output, and LED status
gcode:
    {% set msg = params.MSG|default("Warning")|string %}
    {% set led_status = params.LED|default("ready")|string %}
    
    # Display and console output
    M117 WARNING: {msg}
    RESPOND TYPE=echo MSG="WARNING: {msg}"
    
    # Set LED status (defaults to ready for warnings)
    {% if led_status in printer["gcode_macro _led_vars"].colors %}
        _set_hotend_led_by_name COLOR={led_status}
    {% endif %}

# ==================== GLOBAL VARIABLES ====================
[gcode_macro _global_var]
variable_pause_park: {'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park: {'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 3  # in minutes
variable_cleaning_temp: 150
variable_cleaning_position: {'x': 324, 'y': 357, 'z': 1.2}
variable_prime_amount: 3
variable_load_prime_amount: 30
variable_unload_retract_amount: 50
variable_filament_change_retract: 25
# Filament types and their default chamber temperatures
#variable_filament_chamber_temps: {'PLA': 0, 'PETG': 30, 'ASA': 35, 'ABS': 35, 'TPU': 35}
variable_filament_chamber_temps: {'PLA': 0, 'PETG': 30, 'ASA': 35, 'ABS': 35, 'TPU': 35, 'ASA-AERO': 35} #ASA-Aero in Orca for ASA-CF
gcode:
    # global-vars container; no actions

# ==================== CORE PRINT MACROS ====================
[gcode_macro START_PRINT]
description: Optimized start print sequence with LED status and proper PLA heat soak timing
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
gcode:
    mainled_on
    status_busy  # LED: Start with busy status
    
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(true)|int %}
    {% set material = params.MATERIAL|default("PLA")|string %}
    {% set chamber_target = params.CHAMBER|default(0)|int %}
    {% set prime_amount = printer['gcode_macro _global_var'].prime_amount|float %}
    {% set extruder_target_temp = 125 %}
    {% set bed_target_temp = bedtemp|int %}
    
    M400
    CLEAR_PAUSE
    BED_MESH_CLEAR
    G90

    {% if state == 'Prepare' %}
        _LOG_STATUS MSG="Preparing printer for print" LED=busy

        # Filament check
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="No filament detected - print cancelled"
            CANCEL_PRINT
        {% endif %}

        # OPTIMIZATION: Start both heaters simultaneously for parallel heating
        _LOG_STATUS MSG="Starting parallel heating sequence" LED=heating
        M140 S{bedtemp}  # Start bed heating
        M104 S{hotendtemp if not heatsoak else 150}  # Start hotend (lower temp if soaking)

        # Wait for bed to reach temperature
        {% if printer.heater_bed.temperature < bedtemp %}
            _LOG_STATUS MSG="Waiting for bed to reach {bedtemp}°C" LED=heating
            M190 S{bedtemp}
        {% endif %}

        # CRITICAL FIX: Heat soak immediately after bed reaches temperature, before mechanical operations
        {% if heatsoak == true %}
            # Check if chamber heating is needed
            {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
            {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
            {% set expected_chamber_temp = filament_temps[material]|default(0) %}
            
            {% if expected_chamber_temp > 0 and current_chamber_temp < expected_chamber_temp %}
                # Chamber heating needed - this will take care of heat soak time
                _HEAT_SOAK_CHAMBER BED_TEMP={bedtemp} MATERIAL={material} CHAMBER={chamber_target}
                _LOG_STATUS MSG="Chamber reached target temperature" LED=heating
            {% else %}
                # No chamber heating needed (PLA) - do explicit bed heat soak NOW
                {% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(3)|int %}
                _LOG_STATUS MSG="{material} bed heat soak at {bedtemp}°C for {heatsoak_time} minutes" LED=heating
                
                # Keep hotend warm during soak
                M104 S150
                
                # Perform the heat soak
                G4 P{heatsoak_time * 60000}
                
                _LOG_STATUS MSG="{material} bed heat soak completed - proceeding with mechanical operations" LED=ready
            {% endif %}
        {% endif %}

        # NOW proceed with mechanical operations after proper heat soak
        # QGL
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            _LOG_STATUS MSG="Performing quad gantry leveling" LED=leveling
            QUAD_GANTRY_LEVEL
            _LOG_STATUS MSG="Homing Z after QGL" LED=homing
            G28 Z
        {% endif %}

        # Nozzle cleaning
        _LOG_STATUS MSG="Starting nozzle cleaning" LED=cleaning
        CLEAN_NOZZLE

        # Probe operations
        _LOG_STATUS MSG="Performing EddyNG tap" LED=busy
        PROBE_EDDY_NG_TAP

        # Mesh calibration at final temperature for accuracy
        _LOG_STATUS MSG="Calibrating adaptive bed mesh at print temperature" LED=meshing
        BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan

        M400

        # KAMP operations
        _LOG_STATUS MSG="Smart parking" LED=busy
        SMART_PARK

        # Final heating
        _LOG_STATUS MSG="Reaching final temperatures for printing" LED=heating
        M104 S{hotendtemp}  # Set final hotend temp
        M109 S{hotendtemp}  # Wait for hotend

        # Start exhaust fan
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1

        # Priming
        _LOG_STATUS MSG="Priming nozzle with {prime_amount}mm of filament" LED=busy
        G1 E{prime_amount} F300

        # KAMP Purge
        _LOG_STATUS MSG="Performing line purge" LED=busy
        LINE_PURGE

        _LOG_STATUS MSG="Print started successfully" LED=printing
    {% endif %}

[gcode_macro END_PRINT]
description: Print completion sequence with LED status
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}

    status_busy  # LED: Show busy during shutdown
    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    _LOG_STATUS MSG="Print completed - finalizing" LED=busy
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    _ALL_FAN_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E
    M220 S100
    M221 S100

    CLEAR_PAUSE
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    BED_MESH_CLEAR

    _LOG_STATUS MSG="Print completed successfully - printer ready" LED=completed
    G4 P3000  # Show completion status for 3 seconds
    status_ready  # Return to ready state

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
        {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
        {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        _LOG_STATUS MSG="Pausing print - state: {state}" LED=paused
        
        PAUSE_BASE
        status_paused  # LED: Set paused status
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == true and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == true
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == true and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != true %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-{unload_retract} F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+{filament_change_retract} F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-{unload_retract} F300 
                G90
            {% endif %}
        {% endif %}
        
        _LOG_STATUS MSG="Print paused successfully" LED=paused
    {% else %}
        _LOG_WARNING MSG="Print already paused"
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print with LED status
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                status_busy  # LED: Show busy during filament operations
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                _LOG_STATUS MSG="Heating nozzle to {extruder_target_temp}°C for filament change" LED=heating
                M109 S{extruder_target_temp}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% endif %}
            _LOG_STATUS MSG="Resuming print after filament change" LED=printing
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            _LOG_STATUS MSG="Resuming print from pause" LED=printing
            G91
            G1 E{e_restract} F300
            G90
            RESUME_BASE
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel print with LED status
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE
    status_busy  # LED: Show busy during cancellation

    _LOG_STATUS MSG="Print cancellation initiated" LED=busy
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            _LOG_WARNING MSG="Nozzle not hot enough for retraction"
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    _LOG_STATUS MSG="Print cancelled successfully - printer ready" LED=ready
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

# ==================== PRINT PREP MACROS ====================
[gcode_macro _HEAT_SOAK_CHAMBER]
description: Heat soak with optional chamber pulsing
gcode:
    {% set bedtemp = params.BED_TEMP|int %}
    {% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(3)|int %}
    {% set material = params.MATERIAL|default("PLA")|string|upper %}
    {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
    
    # Get chamber target from OrcaSlicer M141 or fallback to material defaults
    {% set orcaslicer_chamber_target = printer['gcode_macro _CHAMBER_CONTROL'].target_temp|default(0)|float %}
    {% set chamber_target = params.CHAMBER|default(orcaslicer_chamber_target)|int %}
    
    # Set default chamber targets based on material if not specified
    {% if chamber_target == 0 %}
        {% set chamber_target = filament_temps[material]|default(0) %}
    {% endif %}
    
    {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
    
    # PLA: No chamber heating, just bed heatsoak
    {% if material == "PLA" or chamber_target == 0 %}
        _LOG_STATUS MSG="{material} bed heat soak at {bedtemp}°C for {heatsoak_time} minutes" LED=heating
        M104 S150  # Keep hotend warm during soak
        G4 P{heatsoak_time * 60000}
        _LOG_STATUS MSG="{material} bed heat soak completed" LED=ready
    
    # All other materials: Chamber heating with pulsing
    {% else %}
        {% if current_chamber_temp >= chamber_target %}
            _LOG_STATUS MSG="Chamber already at {current_chamber_temp|round(1)}°C (target: {chamber_target}°C)" LED=ready
        {% else %}
            # Start chamber heating timer and pulsing
            {% set start_time = printer.system_stats.cputime %}
            
            _LOG_STATUS MSG="Heating chamber from {current_chamber_temp|round(1)}°C to {chamber_target}°C for {material}"
            _CHAMBER_PULSE ACTION=start  # Start pulsing orange/red
            
            # Use bed at print temp (max 100°C for chamber heating efficiency)
            {% set chamber_bed_temp = [bedtemp, 100]|min %}
            M140 S{chamber_bed_temp}
            
            # Wait for chamber temperature with pulsing
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber_target}
            
            # Stop pulsing and circulation fan
            _CHAMBER_PULSE ACTION=stop
            
            # Check if chamber heating took longer than heatsoak time
            {% set heating_duration = (printer.system_stats.cputime - start_time) / 60 %}
            {% if heating_duration >= heatsoak_time %}
                _LOG_STATUS MSG="Chamber heating ({heating_duration|round(1)} min) completed - no additional heatsoak needed" LED=ready
            {% else %}
                # Additional heatsoak needed
                {% set remaining_soak = (heatsoak_time - heating_duration) * 60 %}
                _LOG_STATUS MSG="Additional {(remaining_soak/60)|round(1)} min heatsoak required" LED=heating
                G4 P{remaining_soak * 1000}
                _LOG_STATUS MSG="Chamber heating and heatsoak completed" LED=ready
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with LED status
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    status_leveling  # LED: Set leveling status
    
    # Home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Full homing required for QGL" LED=homing
        G28
    {% elif 'z' not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Homing Z axis for QGL" LED=homing
        G28 Z
    {% endif %}
    
    # Only proceed with QGL if it hasn't been applied
    {% if not printer.quad_gantry_level.applied %}
        _LOG_STATUS MSG="Starting quad gantry leveling process" LED=leveling        
        # First pass - Coarse adjustment with retry logic
        _LOG_STATUS MSG="QGL coarse pass (tolerance: 0.02mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=0.02 retries=10
        
        # Second pass - Fine adjustment
        _LOG_STATUS MSG="QGL fine pass (tolerance: 0.005mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerance=0.005 retries=5

        # Home Z after leveling
        _LOG_STATUS MSG="QGL process completed, homing Z axis" LED=homing
        G28 Z
        
        _LOG_STATUS MSG="QGL completed successfully" LED=ready
    {% else %}
        _LOG_STATUS MSG="QGL already applied, skipping leveling process" LED=ready
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle with LED status
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    status_cleaning  # LED: Set cleaning status
    
    # Get cleaning parameters from global variables
    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set clean_pos = printer['gcode_macro _global_var'].cleaning_position %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    _LOG_STATUS MSG="Starting nozzle cleaning sequence" LED=cleaning
    
    # Home axes if necessary
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            _LOG_STATUS MSG="Homing all axes for nozzle cleaning" LED=homing
            G28
            _LOG_STATUS MSG="All axes homed successfully" LED=cleaning
        {% else %}
            # If only X and Y are homed, check if Z is homed
            {% if not 'z' in printer.toolhead.homed_axes %}
                # If Z is not homed, home Z
                _LOG_STATUS MSG="Homing Z axis for nozzle cleaning" LED=homing
                G28 Z
                _LOG_STATUS MSG="Z axis homed successfully" LED=cleaning
            {% endif %}
        {% endif %}
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            _LOG_STATUS MSG="Performing Z-tilt adjustment for cleaning" LED=leveling
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            G28 Z
            _LOG_STATUS MSG="Z-tilt adjustment completed" LED=cleaning
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            _LOG_STATUS MSG="Performing Quad Gantry Level for cleaning" LED=leveling
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
            _LOG_STATUS MSG="Quad Gantry Level completed" LED=cleaning
        {% endif %}
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    _LOG_STATUS MSG="Moving to cleaning position" LED=cleaning
    G90 # Absolute positioning
    G1 X{clean_pos.x} Y{clean_pos.y} Z10 F7800 # Move to cleaning position with safe Z height
    
    _HEAT_FOR_FILAMENT TEMP={cleaning_temp} OPERATION="nozzle cleaning"
    
    G91 # Relative positioning
    G90 # Back to absolute positioning
    M106 S127 # Fan at 50%
    
    _LOG_STATUS MSG="Performing {wipes} cleaning cycles" LED=cleaning
    
    # Combined cleaning pattern
    G1 X{clean_pos.x} Y{clean_pos.y} F7800 # Move to start position
    G1 Z{clean_pos.z} F300 # Lower to cleaning height
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %} # Configurable wipe cycles
        # Progress update every 2 cycles
        {% if wipe % 2 == 0 %}
            _LOG_STATUS MSG="Cleaning cycle {wipe + 1}/{wipes}" LED=cleaning
        {% endif %}
        
        # Straight wipes (now moving along X-axis)
        G1 X352 Y{clean_pos.y} F7800 # Forward wipe (right)
        G1 X{clean_pos.x} Y{clean_pos.y} F7800 # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800 # Diagonal forward
        G1 Y360 X336 F7800 # Middle point
        G1 Y{clean_pos.y} X352 F7800 # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X{clean_pos.x} F7800 # Forward wipe
        G1 Y{clean_pos.y} X332 F7800 # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X{clean_pos.x} F7800 # Move away from cleaning area
    M400 # Wait for moves to complete
    _LOG_STATUS MSG="Nozzle cleaning completed" LED=ready
    M107 # Turn off fan
    
    # Return to safe position
    _LOG_STATUS MSG="Returning to safe position" LED=ready
    G91 # Relative positioning
    G1 Z10 F300 # Raise nozzle
    G90 # Absolute positioning
    G28 Z # Home Z
       
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

# ==================== FILAMENT MANAGEMENT ====================
# Helper macro for filament operations heating
[gcode_macro _HEAT_FOR_FILAMENT]
gcode:
    {% set target_temp = params.TEMP|int %}
    {% set operation = params.OPERATION|default("filament operation")|string %}
    
    status_heating  # LED: Set heating status
    _LOG_STATUS MSG="Heating nozzle to {target_temp}°C for {operation}" LED=heating
    M104 S{target_temp}
    M109 S{target_temp}
    _LOG_STATUS MSG="Nozzle ready for {operation}" LED=ready

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set load_amount = 75 %}  # Could move to global vars if needed
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}

    {% if printer.print_stats.state != "printing" %}
        {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}
        
        # Use helper macro for heating
        _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament loading"
    
        status_busy  # LED: Show busy during loading
        _LOG_STATUS MSG="Loading {load_amount}mm of filament" LED=busy
        G91 
        G1 E{load_amount} F300
        G1 E{load_prime} F150
        G1 E-2 F300
        G90
        M400
        _LOG_STATUS MSG="Filament loaded successfully" LED=ready
        M400
    
        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot load filament during printing"
    {% endif %}
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
    {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
    {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}

    {% if printer.print_stats.state != "printing" %}
        # Use helper macro for heating
        _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament unloading"

        status_busy  # LED: Show busy during unloading
        _LOG_STATUS MSG="Unloading filament using {unload_retract}mm retraction" LED=busy
        G91
        G1 E+{filament_change_retract} F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-{unload_retract} F300 
        G90
        M400
        _LOG_STATUS MSG="Filament unloaded successfully" LED=ready
        M400

        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot unload filament during printing"
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

# ==================== UTILITY MACROS ====================
# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      _LOG_WARNING MSG="No operations in 10 minutes - printer idle"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

# ==================== FAN CONTROL ====================
[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    # Run the exhaust fan for another 2min after the other fans and then turn it off
    UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=120
    M107

# ==================== TEMPERATURE CONTROL OVERRIDES ====================
[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+8}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+3}  
    {% endif %}

# ==================== DELAYED GCODE / HELPER MACROS ====================
[delayed_gcode exhaust_fan_off]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

# ==================== ORCASLICER CHAMBER COMPATIBILITY ====================
# Add these macros to enable OrcaSlicer chamber temperature support

[gcode_macro M141]
description: Set chamber temperature
gcode:
    {% set target_temp = params.S|default(0)|float %}
    SET_GCODE_VARIABLE MACRO=_CHAMBER_CONTROL VARIABLE=target_temp VALUE={target_temp}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating disabled"
    {% else %}
        _LOG_STATUS MSG="Chamber target temperature set to {target_temp}°C"
    {% endif %}

[gcode_macro M191]
description: Wait for chamber temperature with pulsing
gcode:
    {% set target_temp = params.S|default(0)|float %}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating cancelled" LED=ready
        _CHAMBER_PULSE ACTION=stop
    {% else %}
        # Get reasonable bed temperature for chamber heating
        {% set current_bed_target = printer.heater_bed.target %}
        {% set bed_temp_for_chamber = 85 %}  # Default
        
        # Smart bed temperature selection
        {% if current_bed_target > 70 %}
            {% set bed_temp_for_chamber = [current_bed_target, 100]|min %}
        {% elif target_temp >= 35 %}
            {% set bed_temp_for_chamber = 100 %}  # High chamber needs hot bed
        {% elif target_temp >= 30 %}
            {% set bed_temp_for_chamber = 85 %}
        {% endif %}
        
        _LOG_STATUS MSG="Waiting for chamber to reach {target_temp}°C"
        _CHAMBER_PULSE ACTION=start  # Start pulsing
        _CHAMBER_HEAT_AND_WAIT TARGET={target_temp} BED_TEMP={bed_temp_for_chamber}
        _CHAMBER_PULSE ACTION=stop   # Stop pulsing
        _LOG_STATUS MSG="Chamber reached target temperature" LED=ready
    {% endif %}

[gcode_macro _CHAMBER_CONTROL]
description: Chamber control state variable
variable_target_temp: 0
gcode:
    # Variable storage only

[gcode_macro _CHAMBER_HEAT_AND_WAIT]
description: Chamber heating (called by M191)
gcode:
    {% set target_temp = params.TARGET|float %}
    {% set bed_temp = params.BED_TEMP|default(85)|int %}
    {% set current_temp = printer["temperature_sensor chamber"].temperature %}
        
    {% if current_temp >= target_temp %}
        _LOG_STATUS MSG="Chamber already at target temperature"
    {% else %}
        # Set bed temperature and start circulation
        M140 S{bed_temp}
        
        # Progress updates every 5 degrees (with pulsing continuing)
        {% set temp_diff = target_temp - current_temp %}
        {% if temp_diff > 10 %}
            {% set progress_interval = 5 %}
            {% set next_milestone = (current_temp + progress_interval)|round(0) %}
            
            {% for milestone in range(next_milestone|int, target_temp|int, progress_interval) %}
                _LOG_STATUS MSG="Chamber heating: {milestone}°C / {target_temp}°C"
                TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={milestone}
            {% endfor %}
        {% endif %}
        
        # Final wait
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_temp}
        
    {% endif %}

[gcode_macro _CHAMBER_PULSE]
description: Simple chamber heating pulse control
variable_active: False
variable_bright: True
gcode:
    {% set action = params.ACTION|default("toggle")|string %}
    
    {% if action == "start" %}
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=active VALUE=True
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=bright VALUE=True
        UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=0.1
    {% elif action == "stop" %}
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=active VALUE=False
        UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=0
    {% elif action == "toggle" %}
        # This is called by the delayed gcode to toggle between bright/dim
        {% if printer["gcode_macro _CHAMBER_PULSE"].active %}
            {% if printer["gcode_macro _CHAMBER_PULSE"].bright %}
                status_chamber_heating_dim
                SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=bright VALUE=False
                UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=1.5  # Dim for 1.5 seconds
            {% else %}
                status_chamber_heating_bright
                SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=bright VALUE=True
                UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=0.8  # Bright for 0.8 seconds
            {% endif %}
        {% endif %}
    {% endif %}

# Delayed gcode for the pulse timer
[delayed_gcode chamber_pulse_timer]
initial_duration: 0
gcode:
    _CHAMBER_PULSE ACTION=toggle