[gcode_macro mainled_on]
gcode:
    SET_LED LED=main_led WHITE=1

[gcode_macro mainled_off]
gcode:
    SET_LED LED=main_led WHITE=0

#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

[force_move]
enable_force_move: True

[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 3 # in minutes
variable_cleaning_temp: 150
variable_cleaning_position: {'x': 324, 'y': 357, 'z': 1.2}
variable_prime_amount: 3
variable_load_prime_amount: 30
variable_unload_retract_amount: 50
variable_filament_change_retract: 25
gcode:
    # global-vars container; no actions

[gcode_macro START_PRINT]
description: 
variable_state: 'Prepare'
variable_record_extruder_temp:0
variable_max_record_extruder_temp:0
gcode:
    mainled_on
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(True)|int %}
    {% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(0)|int %} # takes heatsoak time from global variables
    {% set prime_amount = printer['gcode_macro _global_var'].prime_amount|float %}

    {% set extruder_target_temp = 125 %}

    {% set bed_target_temp = bedtemp|int %}

    M400

    CLEAR_PAUSE

    BED_MESH_CLEAR
    
    G90
    {% if state == 'Prepare' %}

        {action_respond_info("STATUS: Preparing printer for print")}

        {% if printer['filament_switch_sensor filament_sensor'].enabled == True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            M117 No filament!
            {action_respond_info("ERROR: No filament detected - print cancelled")}
            CANCEL_PRINT
        {% endif %}

        # Heatsoak
        {action_respond_info("STATUS: Checking heating requirements")}

        {% if printer.heater_bed.temperature < bed_target_temp %}
            M117 Bed heating...
            {action_respond_info("STATUS: Heating bed to target temperature")}
            M190 S{bed_target_temp}
        {% endif %}

        M140 S{bed_target_temp}

        {% if heatsoak == True %}
          M117 Short Heat Soak
          {action_respond_info("STATUS: Heat soaking bed for " + heatsoak_time|string + " minutes")}
          M104 S150
          G4 P{heatsoak_time * 60000} # pause for x number of minute(s) (see variable_heat_soak_time)
        {% endif %}

        # QGL
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            M117 QGL
            {action_respond_info("STATUS: Performing quad gantry leveling")}
            QUAD_GANTRY_LEVEL
            M117 Home Z after QGL
            G28 Z # And once again after QGL, important..
        {% endif %}

        # Wipe
        M117 Clean Nozzle
        CLEAN_NOZZLE

        # Tap
    	M117 EddyNG Tap
        PROBE_EDDY_NG_TAP
        PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0

        # Mesh
        M117 Bed Mesh
        {action_respond_info("STATUS: Calibrating adaptive bed mesh")}
        BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan

    	M400

    	# KAMP Park
    	SMART_PARK

        #Start exhaust fan
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1

        # Set final temperatures before printing instead of relying on the OrcaSlicer start gcode..
        M117 Final Heating...
        {action_respond_info("STATUS: Final heating - bed: " + bedtemp|string + "°C, hotend: " + hotendtemp|string + "°C")}
        M140 S{bedtemp} ;set bed temp
        M104 S{hotendtemp} ;set extruder temp
        M190 S{bedtemp} ;wait for bed temp
        M109 S{hotendtemp};wait for extruder temp
        M117 Priming nozzle…
        {action_respond_info("STATUS: Priming nozzle with " + prime_amount|string + "mm of filament")}
        G1 E{prime_amount} F300         ; prime using global variable

    	# KAMP Purge
    	LINE_PURGE

        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"' 
        UPDATE_DELAYED_GCODE ID=_print_start_wait DURATION=0.5

    {% elif state == 'Start' %}
        M117 Printing
        {action_respond_info("STATUS: Print started successfully")}
    {% endif %}

[gcode_macro END_PRINT]
description: 
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 Done
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    _ALL_FAN_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E  

    M220 S100
    M221 S100

    CLEAR_PAUSE
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    BED_MESH_CLEAR

    {action_respond_info("STATUS: Print completed successfully")}

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="WARNING: No operations in 10 minutes - printer idle"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[delayed_gcode exhaust_fan_off]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    # Run the exhaust fan for another 2min after the other fans and then turn it off
    UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=120
    M107

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning parameters from global variables
    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set clean_pos = printer['gcode_macro _global_var'].cleaning_position %}
    {% set NOZZLE_TEMP = params.EXTRUDER|default(params.TEMP|default(cleaning_temp))|int %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    # Home axes if necessary
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            {action_respond_info("STATUS: Homing all axes for nozzle cleaning")}
            G28
        {% else %}
            # If only X and Y are homed, check if Z is homed
            {% if not 'z' in printer.toolhead.homed_axes %}
                # If Z is not homed, home Z
                {action_respond_info("STATUS: Homing Z axis for nozzle cleaning")}
                G28 Z
            {% endif %}
        {% endif %}
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        STATUS_LEVELING
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            {action_respond_info("STATUS: Performing Z-tilt adjustment for cleaning")}
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            STATUS_HOMING
            G28 Z
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            {action_respond_info("STATUS: Performing Quad Gantry Level for cleaning")}
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
        {% endif %}
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    G90                                        # Absolute positioning
    G1 X{clean_pos.x} Y{clean_pos.y} Z10 F7800    # Move to cleaning position with safe Z height
    
    M117 Heating nozzle for cleaning...
    {action_respond_info("STATUS: Heating nozzle to " + cleaning_temp|string + "°C for safe cleaning")}
    M104 S{cleaning_temp}        ; heat to pad-safe temperature
    M109 S{cleaning_temp}
    
    G91                                        # Relative positioning
    G90                                        # Back to absolute positioning
    M106 S127                                 # Fan at 50%
    
    M117 Cleaning nozzle
    {action_respond_info("STATUS: Performing " + wipes|string + " cleaning cycles")}
    
    # Combined cleaning pattern
    G1 X{clean_pos.x} Y{clean_pos.y} F7800                        # Move to start position
    G1 Z{clean_pos.z} F300                              # Lower to cleaning height
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %}            # Configurable wipe cycles
        # Straight wipes (now moving along X-axis)
        G1 X352 Y{clean_pos.y} F7800                    # Forward wipe (right)
        G1 X{clean_pos.x} Y{clean_pos.y} F7800                    # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800                    # Diagonal forward
        G1 Y360 X336 F7800                    # Middle point
        G1 Y{clean_pos.y} X352 F7800                    # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X{clean_pos.x} F7800                    # Forward wipe
        G1 Y{clean_pos.y} X332 F7800                    # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X{clean_pos.x} F7800                        # Move away from cleaning area
    M400                                      # Wait for moves to complete
    M117 Clean Complete
    {action_respond_info("STATUS: Nozzle cleaning completed")}
    M107                                      # Turn off fan
    
    # Return to safe position
    G91                                       # Relative positioning
    G1 Z10 F300                              # Raise nozzle
    G90                                       # Absolute positioning
    G28 Z                                     # Home Z
       
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE


# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with manual trigger option and state management
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        #STATUS_HOMING
        {action_respond_info("STATUS: Full homing required for QGL")}
        G28                             # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        #STATUS_HOMING
        {action_respond_info("STATUS: Homing Z axis for QGL")}
        G28 Z                          # Home Z if only Z is unhomed
    {% endif %}
    
    # Only proceed with QGL if it hasn't been applied
    {% if not printer.quad_gantry_level.applied %}
        #STATUS_LEVELING
        {action_respond_info("STATUS: Starting quad gantry leveling process")}
        
        # First pass - Coarse adjustment
        # Note: Replace 5 with preferred height (BTT Eddy=5, Mellow Fly/Cartographer=10)
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=1
        
        # Second pass - Fine adjustment
        _QUAD_GANTRY_LEVEL horizontal_move_z=2
        
        # Home Z after leveling
        #STATUS_HOMING
        {action_respond_info("STATUS: QGL completed, homing Z axis")}
        G28 Z
    {% else %}
        {action_respond_info("STATUS: QGL already applied, skipping")}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("STATUS: Transitioning from Prepare to Heating")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("STATUS: Transitioning from Heating to Start")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    M117 Print canceled!
    {action_respond_info("STATUS: Print cancellation initiated")}
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("WARNING: Nozzle not hot enough for retraction")}
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    M117 Ready
    {action_respond_info("STATUS: Print cancelled successfully - printer ready")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
        {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
        {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        {action_respond_info("STATUS: Pausing print - state: " + state)}
        
        PAUSE_BASE
        M117 Pause Print!!!
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == True
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == True and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-{unload_retract} F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+{filament_change_retract} F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-{unload_retract} F300 
                G90
            {% endif %}
        {% endif %}
    {% else %}
        {action_respond_info("WARNING: Print already paused")}
    {% endif %}


[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("ERROR: Please insert filament before resuming")}
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                {action_respond_info("STATUS: Heating nozzle to " + extruder_target_temp|string + "°C for filament change")}
                M109 S{extruder_target_temp}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% endif %}
            {action_respond_info("STATUS: Resuming print after filament change")}
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("ERROR: Please insert filament before resuming")}
        {% else %}
            {action_respond_info("STATUS: Resuming print from pause")}
            G91
            G1 E{e_restract} F300
            G90
            M117 Printing
            RESUME_BASE
        {% endif %}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set load_amount = 75 %}  # Could move to global vars if needed
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}
        M104 S{target}
        M117 Heating nozzle for filament load...
        {action_respond_info("STATUS: Heating nozzle to " + target|string + "°C for filament loading")}
        M109 S{target}
    
        M117 Loading filament...
        {action_respond_info("STATUS: Loading " + load_amount|string + "mm of filament")}
        G91 
        G1 E{load_amount} F300
        G1 E{load_prime} F150
        G1 E-2 F300
        G90
        M400
        M117 Filament loaded.
        {action_respond_info("STATUS: Filament loaded successfully")}
        M400
    
        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("ERROR: Cannot load filament during printing")}
    {% endif %}
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
    {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
    {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}

    {% if printer.print_stats.state != "printing" %}
        M104 S{target}
        M117 Heating nozzle for filament unload...
        {action_respond_info("STATUS: Heating nozzle to " + target|string + "°C for filament unloading")}
        M109 S{target}

        M117 Unloading filament...
        {action_respond_info("STATUS: Unloading filament using " + unload_retract|string + "mm retraction")}
        G91
        G1 E+{filament_change_retract} F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-{unload_retract} F300 
        G90
        M400
        M117 Filament unloaded.
        {action_respond_info("STATUS: Filament unloaded successfully")}
        M400

        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("ERROR: Cannot unload filament during printing")}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}

    
[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change