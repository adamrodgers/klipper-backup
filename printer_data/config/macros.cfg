# ==================== SYSTEM CONFIGURATION ====================
[force_move]
enable_force_move: true

# ==================== GLOBAL VARIABLES ====================
[gcode_macro _global_var]
variable_pause_park: {'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park: {'x': 0, 'y': 340, 'z': 10, 'e': 1}
variable_maintenance_park: {'x': 175, 'y': 175, 'z': 150}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 3
variable_cleaning_temp: 150
variable_cleaning_position: {'x': 324, 'y': 347, 'z': 1.2}
variable_prime_amount: 3
variable_load_prime_amount: 30
variable_unload_retract_amount: 50
variable_filament_change_retract: 25
variable_filament_chamber_temps: {'PLA': 0, 'PETG': 30, 'ASA': 35, 'ABS': 35, 'TPU': 35, 'ASA-AERO': 35}
variable_probe_retry_count: 3
variable_probe_retry_delay: 2
variable_hotend_cooling_fan_speed: 0.5
gcode:

# ==================== NEVERMORE FAN VARIABLES ====================
[gcode_macro _NEVERMORE_VARS]
variable_threshold: 80          # If bed temp >= this, fans run slow until reached, then fast
variable_slow_threshold: 60     # If bed temp >= this, fans run slow and stay slow
variable_fast: 1.0              # Fast fan speed
variable_slow: 0.5              # Slow fan speed
variable_off_threshold: 50      # Run fans after bed off until temp falls below this
gcode:

# ==================== LOGGING MACROS ====================
[gcode_macro _LOG_STATUS]
description: Consistent status logging with display, console output, and LED status
gcode:
    {% set msg = params.MSG|default("Status update")|string %}
    {% set led_status = params.LED|default("")|string %}
    
    M117 {msg}
    RESPOND TYPE=echo MSG="STATUS: {msg}"
    
    {% if led_status != "" and not printer["gcode_macro _CHAMBER_PULSE"].variable_active %}
        {% if led_status in printer["gcode_macro _led_vars"].colors %}
            _set_hotend_led_by_name COLOR={led_status}
        {% endif %}
    {% endif %}

[gcode_macro _LOG_ERROR]
description: Error logging with display, console output, and error LED
gcode:
    {% set msg = params.MSG|default("Error occurred")|string %}
    
    M117 ERROR: {msg}
    RESPOND TYPE=error MSG="ERROR: {msg}"
    status_error

[gcode_macro _LOG_WARNING]
description: Warning logging with display, console output, and LED status
gcode:
    {% set msg = params.MSG|default("Warning")|string %}
    {% set led_status = params.LED|default("ready")|string %}
    
    M117 WARNING: {msg}
    RESPOND TYPE=echo MSG="WARNING: {msg}"
    
    {% if led_status in printer["gcode_macro _led_vars"].colors %}
        _set_hotend_led_by_name COLOR={led_status}
    {% endif %}

# ==================== LED CONTROL ====================
[gcode_macro mainled_on]
gcode:
    SET_LED LED=main_led WHITE=1

[gcode_macro mainled_off]
gcode:
    SET_LED LED=main_led WHITE=0

# ==================== PARKING MACROS ====================
[gcode_macro PARK_FOR_PAUSE]
description: Move to pause parking position
gcode:
    {% set park = printer['gcode_macro _global_var'].pause_park %}
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set travel_speed = printer['gcode_macro _global_var'].pause_resume_travel_speed * 60 %}
    
    SAVE_GCODE_STATE NAME=PARK_FOR_PAUSE_STATE
    
    G91
    {% if (printer.gcode_move.position.z + park.z) < z_max %}
        G1 Z{park.z} F3000
    {% else %}
        G1 Z{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    
    {% if printer.gcode_move.position.x != park.x or printer.gcode_move.position.y != park.y %}
        G1 X{park.x} Y{park.y} F{travel_speed}
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=PARK_FOR_PAUSE_STATE

[gcode_macro PARK_FOR_CANCEL]
description: Move to cancel parking position
gcode:
    {% set park = printer['gcode_macro _global_var'].cancel_park %}
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    
    SAVE_GCODE_STATE NAME=PARK_FOR_CANCEL_STATE
    
    G91
    {% if (printer.gcode_move.position.z + park.z) < z_max %}
        G1 Z{park.z} F3000
    {% else %}
        G1 Z{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X{park.x} Y{park.y} F9000
    
    RESTORE_GCODE_STATE NAME=PARK_FOR_CANCEL_STATE

[gcode_macro PARK_FOR_MAINTENANCE]
description: Move to maintenance parking position
gcode:
    {% set park = printer['gcode_macro _global_var'].maintenance_park %}
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    
    SAVE_GCODE_STATE NAME=PARK_FOR_MAINTENANCE_STATE
    
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    
    G90
    {% if printer.gcode_move.position.z < park.z %}
        G1 Z{park.z} F3000
    {% endif %}
    G1 X{park.x} Y{park.y} F9000
    
    RESTORE_GCODE_STATE NAME=PARK_FOR_MAINTENANCE_STATE

# ==================== NEVERMORE FAN CONTROL ====================
[gcode_macro NEVERMORE_SLOW]
gcode:
    {% set SLOW = printer["gcode_macro _NEVERMORE_VARS"].slow|float %}
    SET_FAN_SPEED FAN=nevermore_fans SPEED={SLOW}
    _LOG_STATUS MSG="Nevermore fans set to {(SLOW * 100)|round(0)}%"

[gcode_macro NEVERMORE_FAST]
gcode:
    {% set FAST = printer["gcode_macro _NEVERMORE_VARS"].fast|float %}
    SET_FAN_SPEED FAN=nevermore_fans SPEED={FAST}
    _LOG_STATUS MSG="Nevermore fans set to {(FAST * 100)|round(0)}%"

[gcode_macro NEVERMORE_OFF]
gcode:
    SET_FAN_SPEED FAN=nevermore_fans SPEED=0
    _LOG_STATUS MSG="Nevermore fans turned off"

# ==================== CHAMBER CONTROL ====================
[gcode_macro M141]
description: Set chamber temperature
gcode:
    {% set target_temp = params.S|default(0)|float %}
    SET_GCODE_VARIABLE MACRO=_CHAMBER_CONTROL VARIABLE=target_temp VALUE={target_temp}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating disabled"
    {% else %}
        _LOG_STATUS MSG="Chamber target temperature set to {target_temp}°C"
    {% endif %}

[gcode_macro M191]
description: Wait for chamber temperature with pulsing
gcode:
    {% set target_temp = params.S|default(0)|float %}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating disabled" LED=ready
        _CHAMBER_PULSE ACTION=stop
    {% else %}
        {% set current_temp = printer["temperature_sensor chamber"].temperature %}
        
        {% if target_temp <= current_temp %}
            _LOG_STATUS MSG="Chamber already at or above target ({current_temp|round(1)}°C ≥ {target_temp}°C)" LED=ready
        {% else %}
            {% set current_bed_target = printer.heater_bed.target %}
            {% set bed_temp_for_chamber = 85 %}
            
            {% if current_bed_target > 70 %}
                {% set bed_temp_for_chamber = [current_bed_target, 100]|min %}
            {% elif target_temp >= 35 %}
                {% set bed_temp_for_chamber = 100 %}
            {% elif target_temp >= 30 %}
                {% set bed_temp_for_chamber = 85 %}
            {% endif %}
            
            _LOG_STATUS MSG="Waiting for chamber to reach {target_temp}°C" LED=heating
            _CHAMBER_PULSE ACTION=start
            _CHAMBER_HEAT_AND_WAIT TARGET={target_temp} BED_TEMP={bed_temp_for_chamber}
            _CHAMBER_PULSE ACTION=stop
            _LOG_STATUS MSG="Chamber reached target temperature" LED=ready
        {% endif %}
    {% endif %}

[gcode_macro _CHAMBER_CONTROL]
description: Chamber control state variable
variable_target_temp: 0
gcode:

[gcode_macro _CHAMBER_HEAT_AND_WAIT]
description: Chamber heating (called by M191)
gcode:
    {% set target_temp = params.TARGET|float %}
    {% set bed_temp = params.BED_TEMP|default(85)|int %}
    {% set current_temp = printer["temperature_sensor chamber"].temperature %}
    
    M140 S{bed_temp}
    
    {% set temp_diff = target_temp - current_temp %}
    {% if temp_diff > 10 %}
        {% set progress_interval = 5 %}
        {% set next_milestone = (current_temp + progress_interval)|round(0) %}
        
        {% for milestone in range(next_milestone|int, target_temp|int, progress_interval) %}
            _LOG_STATUS MSG="Chamber heating: {milestone}°C / {target_temp}°C"
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={milestone}
        {% endfor %}
    {% endif %}
    
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_temp}

[gcode_macro _CHAMBER_PULSE]
description: Chamber heating pulse control with multiple steps using LED status system
variable_active: False
variable_step: 0
gcode:
    {% set action = params.ACTION|default("toggle")|string %}
    
    {% if action == "start" %}
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=active VALUE=True
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=step VALUE=0
        status_chamber_heating_dim
        UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=0.3
    {% elif action == "stop" %}
        SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=active VALUE=False
        UPDATE_DELAYED_GCODE ID=chamber_pulse_timer DURATION=0
        status_heating
    {% elif action == "toggle" %}
        {% set current_step = printer["gcode_macro _CHAMBER_PULSE"].step|int %}
        
        {% if current_step % 2 == 0 %}
            status_chamber_heating_bright
        {% else %}
            status_chamber_heating_dim
        {% endif %}
        
        {% if current_step >= 7 %}
            SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=step VALUE=0
        {% else %}
            SET_GCODE_VARIABLE MACRO=_CHAMBER_PULSE VARIABLE=step VALUE={current_step + 1}
        {% endif %}
        
        UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=0.3
    {% endif %}

[delayed_gcode chamber_pulse_timer]
initial_duration: 0
gcode:
    {% if printer["gcode_macro _CHAMBER_PULSE"].active %}
        _CHAMBER_PULSE ACTION=toggle
    {% endif %}

[gcode_macro _HEAT_SOAK_CHAMBER]
description: Heat soak with optional chamber pulsing and minimum soak times
gcode:
    {% set bedtemp = params.BED_TEMP|int %}
    {% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(3)|int %}
    {% set material = params.MATERIAL|default("PLA")|string|upper %}
    {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
    
    {% set orcaslicer_chamber_target = printer['gcode_macro _CHAMBER_CONTROL'].target_temp|default(0)|float %}
    {% set chamber_target = params.CHAMBER|default(orcaslicer_chamber_target)|int %}
    
    {% if chamber_target == 0 %}
        {% set chamber_target = filament_temps[material]|default(0) %}
    {% endif %}
    
    {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
    
    {% set material_soak_times = {
        "PLA": 3,
        "PETG": 4,
        "ASA": 3,
        "ABS": 3,
        "TPU": 3,
        "ASA-AERO": 3,
        "HIPS": 4
    } %}
    {% set min_soak_time = material_soak_times[material]|default(3) %}
    
    {% if material == "PLA" %}
        _LOG_STATUS MSG="{material} printing - performing {min_soak_time} minute heat soak (no chamber heating)" LED=heating
        G4 P{min_soak_time * 60 * 1000}
        _LOG_STATUS MSG="{material} heat soak completed" LED=ready
        M104 S150
    {% elif chamber_target == 0 %}
        _LOG_STATUS MSG="{material} printing - no heat soak required (chamber heating will handle timing)" LED=ready
    {% else %}
        {% if current_chamber_temp >= chamber_target %}
            _LOG_STATUS MSG="Chamber already at {current_chamber_temp|round(1)}°C (target: {chamber_target}°C) - performing {min_soak_time} minute {material} soak" LED=heating
            G4 P{min_soak_time * 60 * 1000}
            _LOG_STATUS MSG="{material} heat soak completed" LED=ready
        {% else %}
            {% set start_time = printer.system_stats.cputime %}
            
            _LOG_STATUS MSG="Heating chamber from {current_chamber_temp|round(1)}°C to {chamber_target}°C for {material}" LED=heating
            _CHAMBER_PULSE ACTION=start
            
            {% set chamber_bed_temp = [bedtemp, 100]|min %}
            M140 S{chamber_bed_temp}
            
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber_target}
            
            _CHAMBER_PULSE ACTION=stop
            
            {% set heating_duration = (printer.system_stats.cputime - start_time) / 60 %}
            {% if heating_duration >= min_soak_time %}
                _LOG_STATUS MSG="Chamber heating ({heating_duration|round(1)} min) completed - minimum soak time satisfied" LED=ready
            {% else %}
                {% set remaining_soak = (min_soak_time - heating_duration) * 60 %}
                _LOG_STATUS MSG="Additional {(remaining_soak/60)|round(1)} min soak required for {material}" LED=heating
                G4 P{remaining_soak * 1000}
                _LOG_STATUS MSG="Chamber heating and {material} heat soak completed" LED=ready
            {% endif %}
        {% endif %}
    {% endif %}

# ==================== TEMPERATURE OVERRIDES ====================
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER|default("None") %}
    {% set TARGET = params.TARGET|default(0)|int %}
    {% set THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].threshold|int %}
    {% set SLOW_THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].slow_threshold|int %}
    
    {% if HEATER|lower == "extruder" %}
        M104 S{TARGET}
    {% elif HEATER|lower == "heater_bed" %}
        M99140 S{TARGET}
    {% else %}
        {action_respond_info("Heater %s not supported" % HEATER)}
    {% endif %}

    {% if HEATER|lower == "heater_bed" %}
        {% if TARGET >= THRESHOLD %}
            NEVERMORE_SLOW
            UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=1
        {% elif TARGET >= SLOW_THRESHOLD %}
            NEVERMORE_SLOW
        {% elif TARGET == 0 %}
            {% if printer.heater_bed.temperature|int >= printer["gcode_macro _NEVERMORE_VARS"].off_threshold %}
                UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=300
            {% else %}
                NEVERMORE_OFF
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro M140]
rename_existing: M99140
gcode:
    {% set S = params.S|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}

[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set S = params.S|int %}
    {% set THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].threshold|int %}
    
    {% if S >= THRESHOLD %}
        NEVERMORE_SLOW
    {% else %}
        NEVERMORE_OFF
    {% endif %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
      
    {% if S != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}
    {% endif %}

    {% if S >= THRESHOLD %}								    
        NEVERMORE_FAST
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+8}
    {% endif %}

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    _TURN_OFF_HEATERS
    {% if printer.heater_bed.temperature|int >= printer["gcode_macro _NEVERMORE_VARS"].off_threshold %}
        UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=300
    {% else %}
        NEVERMORE_OFF
    {% endif %}

[delayed_gcode nevermore_loop]
gcode:
    {% set THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].threshold|int %}
    {% set OFF_THRESHOLD = printer["gcode_macro _NEVERMORE_VARS"].off_threshold %}
    
    {% if printer.heater_bed.target >= THRESHOLD %}
        {% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
            NEVERMORE_FAST
        {% else %}
            UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=5
        {% endif %}
    {% elif printer.heater_bed.target == 0 %}
        {% if printer.heater_bed.temperature|int >= OFF_THRESHOLD %}
            NEVERMORE_SLOW
            UPDATE_DELAYED_GCODE ID=nevermore_loop DURATION=300
        {% else %}
            NEVERMORE_OFF
        {% endif %}
    {% endif %}

# ==================== PRINT PREPARATION ====================
[gcode_macro _PROBE_WITH_RETRY]
description: Probe with automatic retry on failure
gcode:
    {% set retry_count = printer['gcode_macro _global_var'].probe_retry_count|int %}
    {% set retry_delay = printer['gcode_macro _global_var'].probe_retry_delay|int %}
    {% set probe_cmd = params.PROBE_CMD|default("PROBE")|string %}
    
    RESPOND TYPE=command MSG="action:probe_attempt_1"
    {probe_cmd}
    
    {% if printer.probe.last_query %}
        {% if retry_count > 1 %}
            _LOG_WARNING MSG="Probe attempt 2 of {retry_count}" LED=busy
            G4 P{retry_delay * 1000}
            RESPOND TYPE=command MSG="action:probe_attempt_2"
            {probe_cmd}
            
            {% if printer.probe.last_query %}
                {% if retry_count > 2 %}
                    _LOG_WARNING MSG="Probe attempt 3 of {retry_count}" LED=busy
                    G4 P{retry_delay * 1000}
                    RESPOND TYPE=command MSG="action:probe_attempt_3"
                    {probe_cmd}
                    
                    {% if printer.probe.last_query %}
                        _LOG_ERROR MSG="Probe failed after {retry_count} attempts"
                        CANCEL_PRINT
                    {% else %}
                        _LOG_STATUS MSG="Probe successful on attempt 3" LED=ready
                    {% endif %}
                {% else %}
                    _LOG_ERROR MSG="Probe failed after 2 attempts"
                    CANCEL_PRINT
                {% endif %}
            {% else %}
                _LOG_STATUS MSG="Probe successful on attempt 2" LED=ready
            {% endif %}
        {% else %}
            _LOG_ERROR MSG="Probe failed after 1 attempt"
            CANCEL_PRINT
        {% endif %}
    {% else %}
        _LOG_STATUS MSG="Probe successful on attempt 1" LED=ready
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with LED status and optional Z home skip
gcode:
    {% set skip_final_z_home = params.SKIP_FINAL_Z_HOME|default(0)|int %}
    
    SAVE_GCODE_STATE NAME=STATE_QGL
    status_leveling
    
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Full homing required for QGL" LED=homing
        G28
    {% elif 'z' not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Homing Z axis for QGL" LED=homing
        G28 Z
    {% endif %}
    
    {% if not printer.quad_gantry_level.applied %}
        _LOG_STATUS MSG="Starting quad gantry leveling process" LED=leveling
        _LOG_STATUS MSG="QGL coarse pass (tolerance: 0.1mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=0.1
        
        _LOG_STATUS MSG="QGL fine pass (tolerance: 0.02mm)" LED=leveling
        _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerance=0.02
        
        {% if skip_final_z_home %}
            _LOG_STATUS MSG="QGL process completed - skipping final Z home as requested" LED=ready
        {% else %}
            _LOG_STATUS MSG="QGL process completed, homing Z axis" LED=homing
            G28 Z
        {% endif %}
        
        _LOG_STATUS MSG="QGL completed successfully" LED=ready
    {% else %}
        _LOG_STATUS MSG="QGL already applied, skipping leveling process" LED=ready
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle with LED status and smart Z homing
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    status_cleaning
    
    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set clean_pos = printer['gcode_macro _global_var'].cleaning_position %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    _LOG_STATUS MSG="Starting nozzle cleaning sequence" LED=cleaning
    
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            _LOG_STATUS MSG="Homing all axes for nozzle cleaning" LED=homing
            G28
            _LOG_STATUS MSG="All axes homed successfully" LED=cleaning
        {% else %}
            {% if not 'z' in printer.toolhead.homed_axes %}
                _LOG_STATUS MSG="Homing Z axis for nozzle cleaning" LED=homing
                G28 Z
                _LOG_STATUS MSG="Z axis homed successfully" LED=cleaning
            {% endif %}
        {% endif %}
    {% endif %}
    
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            _LOG_STATUS MSG="Performing Z-tilt adjustment for cleaning" LED=leveling
            Z_TILT_ADJUST
            G28 Z
            _LOG_STATUS MSG="Z-tilt adjustment completed" LED=cleaning
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            _LOG_STATUS MSG="Performing Quad Gantry Level for cleaning" LED=leveling
            QUAD_GANTRY_LEVEL SKIP_FINAL_Z_HOME=1
            _LOG_STATUS MSG="Quad Gantry Level completed" LED=cleaning
        {% endif %}
    {% endif %}
    
    _LOG_STATUS MSG="Moving to cleaning position" LED=cleaning
    G90
    G1 X{clean_pos.x} Y{clean_pos.y} Z10 F7800
    
    _HEAT_FOR_FILAMENT TEMP={cleaning_temp} OPERATION="nozzle cleaning"
    
    G91
    G90
    M106 S127
    
    _LOG_STATUS MSG="Performing {wipes} cleaning cycles" LED=cleaning
    
    G1 X{clean_pos.x} Y{clean_pos.y} F7800
    G1 Z{clean_pos.z} F300
    
    {% for wipe in range(wipes) %}
        {% if wipe % 2 == 0 %}
            _LOG_STATUS MSG="Cleaning cycle {wipe + 1}/{wipes}" LED=cleaning
        {% endif %}
        
        G1 X352 Y{clean_pos.y} F7800
        G1 X{clean_pos.x} Y{clean_pos.y} F7800
        
        G1 Y362 X332 F7800
        G1 Y360 X336 F7800
        G1 Y{clean_pos.y} X352 F7800
        
        G1 Y362 X{clean_pos.x} F7800
        G1 Y{clean_pos.y} X332 F7800
    {% endfor %}
    
    G1 Y363 X{clean_pos.x} F7800
    M400
    _LOG_STATUS MSG="Nozzle cleaning completed" LED=ready
    M107
    
    _LOG_STATUS MSG="Returning to safe position" LED=ready
    G91
    G1 Z10 F300
    G90
    G28 Z
    
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

# ==================== CORE PRINT MACROS ====================
[gcode_macro START_PRINT]
description: Optimized start print sequence with proper material-based heat soak logic
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
gcode:
    mainled_on
    status_busy
    
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(true)|int %}
    {% set material = params.MATERIAL|default("PLA")|string %}
    {% set chamber_target = params.CHAMBER|default(0)|int %}
    {% set prime_amount = printer['gcode_macro _global_var'].prime_amount|float %}
    {% set extruder_target_temp = 125 %}
    {% set bed_target_temp = bedtemp|int %}
    
    M400
    CLEAR_PAUSE
    BED_MESH_CLEAR
    G90
    
    {% if state == 'Prepare' %}
        _LOG_STATUS MSG="Preparing printer for print" LED=busy
        
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="No filament detected - print cancelled"
            CANCEL_PRINT
        {% endif %}
        
        _LOG_STATUS MSG="Starting parallel heating sequence" LED=heating
        M140 S{bedtemp}
        M104 S{hotendtemp if not heatsoak else 150}
        
        {% if printer.heater_bed.temperature < bedtemp %}
            _LOG_STATUS MSG="Waiting for bed to reach {bedtemp}°C" LED=heating
            M190 S{bedtemp}
        {% endif %}
        
        {% if heatsoak == true %}
            _HEAT_SOAK_CHAMBER BED_TEMP={bedtemp} MATERIAL={material} CHAMBER={chamber_target}
        {% endif %}
        
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            _LOG_STATUS MSG="Performing quad gantry leveling" LED=leveling
            QUAD_GANTRY_LEVEL
            _LOG_STATUS MSG="Homing Z after QGL" LED=homing
            G28 Z
        {% endif %}
        
        _LOG_STATUS MSG="Performing EddyNG tap" LED=busy
        _PROBE_WITH_RETRY PROBE_CMD="PROBE_EDDY_NG_TAP"
        
        _LOG_STATUS MSG="Calibrating adaptive bed mesh at print temperature" LED=meshing
        _PROBE_WITH_RETRY PROBE_CMD="BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan"
        
        M400
        
        _LOG_STATUS MSG="Smart parking" LED=busy
        SMART_PARK
        
        _LOG_STATUS MSG="Reaching final temperatures for printing" LED=heating
        M104 S{hotendtemp}
        M109 S{hotendtemp}
        
        _LOG_STATUS MSG="Priming nozzle with {prime_amount}mm of filament" LED=busy
        G1 E{prime_amount} F300
        
        _LOG_STATUS MSG="Performing line purge" LED=busy
        LINE_PURGE

        SET_FAN_SPEED FAN=hotend_cooling_fan SPEED={printer['gcode_macro _global_var'].hotend_cooling_fan_speed}
        
        _LOG_STATUS MSG="Print started successfully" LED=printing
    {% endif %}

[gcode_macro END_PRINT]
description: Print completion sequence with LED status
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}
    
    status_busy
    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0
    
    _LOG_STATUS MSG="Print completed - finalizing" LED=busy
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}
    
    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y348 F9000
    
    _ALL_FAN_OFF
    TURN_OFF_HEATERS
    
    M84 X Y Z E
    M220 S100
    M221 S100
    
    CLEAR_PAUSE
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    BED_MESH_CLEAR
    
    _LOG_STATUS MSG="Print completed successfully - printer ready" LED=completed
    G4 P3000
    status_ready

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
        {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
        
        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        _LOG_STATUS MSG="Pausing print - state: {state}" LED=paused
        
        PAUSE_BASE
        status_paused
        
        PARK_FOR_PAUSE
        
        M104 S{printer.extruder.target}
        
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
                      printer['filament_switch_sensor filament_sensor'].filament_detected == true
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == true and
                        printer['filament_switch_sensor filament_sensor'].filament_detected != true %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-{unload_retract} F300
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+{filament_change_retract} F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-{unload_retract} F300
                G90
            {% endif %}
        {% endif %}
        
        _LOG_STATUS MSG="Print paused successfully" LED=paused
    {% else %}
        _LOG_WARNING MSG="Print already paused"
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print with LED status
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}
    
    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
    
    {% if state == 'filament_change' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                status_busy
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                _LOG_STATUS MSG="Heating nozzle to {extruder_target_temp}°C for filament change" LED=heating
                M109 S{extruder_target_temp}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% endif %}
            _LOG_STATUS MSG="Resuming print after filament change" LED=printing
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            _LOG_STATUS MSG="Resuming print from pause" LED=printing
            G91
            G1 E{e_restract} F300
            G90
            RESUME_BASE
            SET_FAN_SPEED FAN=hotend_cooling_fan SPEED={printer['gcode_macro _global_var'].hotend_cooling_fan_speed}
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel print with LED status
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}
    
    CANCEL_PRINT_BASE
    status_busy
    
    _LOG_STATUS MSG="Print cancellation initiated" LED=busy
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            _LOG_WARNING MSG="Nozzle not hot enough for retraction"
        {% endif %}
    {% endif %}
    
    PARK_FOR_CANCEL
    
    TURN_OFF_HEATERS
    _ALL_FAN_OFF
    
    CLEAR_PAUSE
    M84 X Y Z E
    
    _LOG_STATUS MSG="Print cancelled successfully - printer ready" LED=ready
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

# ==================== FILAMENT MANAGEMENT ====================
[gcode_macro _HEAT_FOR_FILAMENT]
gcode:
    {% set target_temp = params.TEMP|int %}
    {% set operation = params.OPERATION|default("filament operation")|string %}
    
    status_heating
    _LOG_STATUS MSG="Heating nozzle to {target_temp}°C for {operation}" LED=heating
    M104 S{target_temp}
    M109 S{target_temp}
    _LOG_STATUS MSG="Nozzle ready for {operation}" LED=ready

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set load_amount = 75 %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    
    {% if printer.print_stats.state != "printing" %}
        {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}
        
        _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament loading"
        
        status_busy
        _LOG_STATUS MSG="Loading {load_amount}mm of filament" LED=busy
        G91
        G1 E{load_amount} F300
        G1 E{load_prime} F150
        G1 E-2 F300
        G90
        M400
        _LOG_STATUS MSG="Filament loaded successfully" LED=ready
        M400
        
        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot load filament during printing"
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
    {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
    {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}
    
    {% if printer.print_stats.state != "printing" %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true %}
            _LOG_WARNING MSG="No filament detected - unload operation cancelled"
        {% else %}
            _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament unloading"
            
            status_busy
            _LOG_STATUS MSG="Unloading filament using {unload_retract}mm retraction" LED=busy
            G91
            G1 E+{filament_change_retract} F300
            G1 E-10 F1500
            G1 E-20 F600
            M400
            G4 P3000
            G1 E-{unload_retract} F300
            G90
            M400
            _LOG_STATUS MSG="Filament unloaded successfully" LED=ready
            M400
            
            {% if printer.print_stats.state != "paused" %}
                M104 S0
            {% endif %}
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot unload filament during printing"
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

# ==================== FAN CONTROL ====================
[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    SET_FAN_SPEED FAN=hotend_cooling_fan SPEED=0
    NEVERMORE_OFF
    M107

# ==================== UTILITY MACROS ====================
[gcode_macro CENTER]
gcode:
    G0 X175 Y175 F5000

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% else %}
        G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL
    G28 Z
    G0 X175 Y175 Z30 F3600

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
        _LOG_WARNING MSG="No operations in 10 minutes - printer idle"
    {% else %}
        M84
        TURN_OFF_HEATERS
    {% endif %}