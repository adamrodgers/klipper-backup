# ==================== LED CONTROLS ====================
[gcode_macro mainled_on]
gcode:
    SET_LED LED=main_led WHITE=1

[gcode_macro mainled_off]
gcode:
    SET_LED LED=main_led WHITE=0

# ==================== SYSTEM CONFIGURATION ====================
[force_move]
enable_force_move: true

# ==================== HELPER MACROS FOR MESSAGES ====================
[gcode_macro _LOG_STATUS]
description: Consistent status logging with display and console output
gcode:
    {% set msg = params.MSG|default("Status update")|string %}
    M117 {msg}
    RESPOND TYPE=echo MSG="STATUS: {msg}"

[gcode_macro _LOG_ERROR]
description: Error logging with display and console output
gcode:
    {% set msg = params.MSG|default("Error occurred")|string %}
    M117 ERROR: {msg}
    RESPOND TYPE=error MSG="ERROR: {msg}"

[gcode_macro _LOG_WARNING]
description: Warning logging with display and console output
gcode:
    {% set msg = params.MSG|default("Warning")|string %}
    M117 WARNING: {msg}
    RESPOND TYPE=echo MSG="WARNING: {msg}"

# ==================== GLOBAL VARIABLES ====================
[gcode_macro _global_var]
variable_pause_park: {'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park: {'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 60
variable_load_filament_extruder_temp: 230
variable_heat_soak_time: 3  # in minutes
variable_cleaning_temp: 150
variable_cleaning_position: {'x': 324, 'y': 357, 'z': 1.2}
variable_prime_amount: 3
variable_load_prime_amount: 30
variable_unload_retract_amount: 50
variable_filament_change_retract: 25
# Filament types and their default chamber temperatures
variable_filament_chamber_temps: {'PLA': 0, 'PETG': 30, 'ASA': 35, 'ABS': 35, 'TPU': 35}
gcode:
    # global-vars container; no actions

# ==================== PRE-PRINT TIMER ====================
[gcode_macro _PREPRINT_TIMER]
description: Timer control for pre-print setup duration using real time
variable_start_time: 0
variable_is_timing: False
gcode:
    # Variable storage only - no actions

[gcode_macro _START_PREPRINT_TIMER]
description: Start the pre-print setup timer using reactor time
gcode:
    # Use reactor monotonic time which tracks real elapsed time
    {% set current_time = printer.mcu.estimated_print_time %}
    SET_GCODE_VARIABLE MACRO=_PREPRINT_TIMER VARIABLE=start_time VALUE={current_time}
    SET_GCODE_VARIABLE MACRO=_PREPRINT_TIMER VARIABLE=is_timing VALUE=True
    _LOG_STATUS MSG="Pre-print setup timer started"

[gcode_macro _STOP_PREPRINT_TIMER]
description: Stop the pre-print timer and display elapsed real time
gcode:
    {% set timer_vars = printer['gcode_macro _PREPRINT_TIMER'] %}
    {% if timer_vars.is_timing %}
        {% set end_time = printer.mcu.estimated_print_time %}
        {% set elapsed_seconds = (end_time - timer_vars.start_time)|int %}
        {% set minutes = (elapsed_seconds // 60)|int %}
        {% set seconds = (elapsed_seconds % 60)|int %}
        
        SET_GCODE_VARIABLE MACRO=_PREPRINT_TIMER VARIABLE=is_timing VALUE=False
        _LOG_STATUS MSG="Pre-print setup complete after {minutes} mins, {seconds} seconds (real time)"
    {% endif %}

# ==================== CORE PRINT MACROS ====================
[gcode_macro START_PRINT]
description: Optimized start print sequence
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
gcode:
    mainled_on
    # Start timer only if not already running (M191 might have started it)
    {% if not printer['gcode_macro _PREPRINT_TIMER'].is_timing %}
        _START_PREPRINT_TIMER
    {% endif %}
    
    {% set bedtemp = params.BED_TEMP|default(60)|int %}
    {% set hotendtemp = params.EXTRUDER_TEMP|default(230)|int %}
    {% set heatsoak = params.HEATSOAK|default(true)|int %}
    {% set material = params.MATERIAL|default("PLA")|string %}
    {% set chamber_target = params.CHAMBER|default(0)|int %}
    {% set prime_amount = printer['gcode_macro _global_var'].prime_amount|float %}
    {% set extruder_target_temp = 125 %}
    {% set bed_target_temp = bedtemp|int %}
    
    M400
    CLEAR_PAUSE
    BED_MESH_CLEAR
    G90

    {% if state == 'Prepare' %}
        _LOG_STATUS MSG="Preparing printer for print"

        # Filament check
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="No filament detected - print cancelled"
            CANCEL_PRINT
        {% endif %}

        # OPTIMIZATION: Start both heaters simultaneously for parallel heating
        _LOG_STATUS MSG="Starting parallel heating sequence"
        M140 S{bedtemp}  # Start bed heating
        M104 S{hotendtemp if not heatsoak else 150}  # Start hotend (lower temp if soaking)

        # Wait for bed to reach temperature
        {% if printer.heater_bed.temperature < bedtemp %}
            _LOG_STATUS MSG="Waiting for bed to reach {bedtemp}Â°C"
            M190 S{bedtemp}
        {% endif %}

        # Smart heat soak with chamber control (only if chamber wasn't already heated by M191)
        {% if heatsoak == true %}
            # Check if chamber is already at target temp (heated by M191)
            {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
            {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
            {% set expected_chamber_temp = filament_temps[material]|default(0) %}
            
            {% if expected_chamber_temp > 0 and current_chamber_temp < expected_chamber_temp %}
                _HEAT_SOAK_CHAMBER BED_TEMP={bedtemp} MATERIAL={material} CHAMBER={chamber_target}
                _LOG_STATUS MSG="Chamber reached target temperature"
            {% else %}
                _LOG_STATUS MSG="Chamber already heated or no chamber heating needed for {material}"
            {% endif %}
        {% endif %}

        # QGL
        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            _LOG_STATUS MSG="Performing quad gantry leveling"
            QUAD_GANTRY_LEVEL
            _LOG_STATUS MSG="Homing Z after QGL"
            G28 Z
        {% endif %}

        # Nozzle cleaning
        _LOG_STATUS MSG="Starting nozzle cleaning"
        CLEAN_NOZZLE

        # Probe operations
        _LOG_STATUS MSG="Performing EddyNG tap"
        PROBE_EDDY_NG_TAP

        # Mesh calibration at final temperature for accuracy
        _LOG_STATUS MSG="Calibrating adaptive bed mesh at print temperature"
        BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan

        M400

        # KAMP operations
        _LOG_STATUS MSG="Smart parking"
        SMART_PARK

        # Final heating
        _LOG_STATUS MSG="Reaching final temperatures for printing"
        M104 S{hotendtemp}  # Set final hotend temp
        M109 S{hotendtemp}  # Wait for hotend

        # Start exhaust fan
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1

        # Priming
        _LOG_STATUS MSG="Priming nozzle with {prime_amount}mm of filament"
        G1 E{prime_amount} F300

        # KAMP Purge
        _LOG_STATUS MSG="Performing line purge"
        LINE_PURGE

        _STOP_PREPRINT_TIMER # End print prep timer and report duration
        _LOG_STATUS MSG="Print started successfully"
    {% endif %}

[gcode_macro END_PRINT]
description: Print completion sequence
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    _LOG_STATUS MSG="Print completed - finalizing"
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 25) < z_max %}
        G1 Z+25 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    _ALL_FAN_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E
    M220 S100
    M221 S100

    CLEAR_PAUSE
    PROBE_EDDY_NG_SET_TAP_OFFSET VALUE=0
    BED_MESH_CLEAR

    _LOG_STATUS MSG="Print completed successfully - printer ready"

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
        {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
        {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        _LOG_STATUS MSG="Pausing print - state: {state}"
        
        PAUSE_BASE
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == true and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == true
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == true and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != true %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-{unload_retract} F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+{filament_change_retract} F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-{unload_retract} F300 
                G90
            {% endif %}
        {% endif %}
        
        _LOG_STATUS MSG="Print paused successfully"
    {% else %}
        _LOG_WARNING MSG="Print already paused"
    {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
          printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% else %}
                M104 S{extruder_target_temp}
                _LOG_STATUS MSG="Heating nozzle to {extruder_target_temp}Â°C for filament change"
                M109 S{extruder_target_temp}
                G91
                G1 E{load_prime} F300
                G1 E10 F150
                G90
            {% endif %}
            _LOG_STATUS MSG="Resuming print after filament change"
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enabled == true and
              printer['filament_switch_sensor filament_sensor'].filament_detected != true
        %}
            _LOG_ERROR MSG="Please insert filament before resuming"
        {% else %}
            _LOG_STATUS MSG="Resuming print from pause"
            G91
            G1 E{e_restract} F300
            G90
            RESUME_BASE
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    _LOG_STATUS MSG="Print cancellation initiated"
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == true and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == true
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            _LOG_WARNING MSG="Nozzle not hot enough for retraction"
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    _LOG_STATUS MSG="Print cancelled successfully - printer ready"
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

# ==================== PRINT PREP MACROS ====================
[gcode_macro _HEAT_SOAK_CHAMBER]
description: Smart heat soak with chamber temperature control
gcode:
    {% set bedtemp = params.BED_TEMP|int %}
    {% set heatsoak_time = printer['gcode_macro _global_var'].heat_soak_time|default(0)|int %}
    {% set material = params.MATERIAL|default("PLA")|string|upper %}
    {% set filament_temps = printer['gcode_macro _global_var'].filament_chamber_temps %}
    
    # Check if OrcaSlicer set a chamber temperature via M141
    {% set orcaslicer_chamber_target = printer['gcode_macro _CHAMBER_CONTROL'].target_temp|default(0)|float %}
    {% set chamber_target = params.CHAMBER|default(orcaslicer_chamber_target)|int %}
    {% set current_chamber_temp = printer["temperature_sensor chamber"].temperature %}
    
    # Set default chamber targets based on material (only if no chamber temp was set)
    {% if chamber_target == 0 %}
        {% set chamber_target = filament_temps[material]|default(0) %}
    {% endif %}
    
    {% if chamber_target > 0 %}
        {% if current_chamber_temp < chamber_target %}
            _LOG_STATUS MSG="Heating chamber from {current_chamber_temp|round(1)}Â°C to {chamber_target}Â°C for {material}"
            
            # Use target bed temp for faster chamber heating
            _PASSIVE_CHAMBER_HEAT TARGET={chamber_target} BED_TEMP={bedtemp}
            
            # Chamber heating counts as heat soak - no additional time needed
            _LOG_STATUS MSG="Chamber heating completed - skipping additional heat soak"
        {% else %}
            _LOG_STATUS MSG="Chamber already at {current_chamber_temp|round(1)}Â°C (target: {chamber_target}Â°C)"
        {% endif %}
    {% else %}
        # PLA or no chamber heating needed - just brief heat soak
        _LOG_STATUS MSG="Brief heat soak for {material} ({heatsoak_time} minutes)"
        M104 S150  # Warm hotend slightly during soak
        G4 P{heatsoak_time * 60000}
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Enhanced Quad Gantry Leveling with multiple passes
gcode:
    SAVE_GCODE_STATE NAME=STATE_QGL
    
    # Home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Full homing required for QGL"
        G28
    {% elif 'z' not in printer.toolhead.homed_axes %}
        _LOG_STATUS MSG="Homing Z axis for QGL"
        G28 Z
    {% endif %}
    
    # Only proceed with QGL if it hasn't been applied
    {% if not printer.quad_gantry_level.applied %}
        _LOG_STATUS MSG="Starting quad gantry leveling process"        
        # First pass - Coarse adjustment with retry logic
        _LOG_STATUS MSG="QGL coarse pass (tolerance: 0.02mm)"
        _QUAD_GANTRY_LEVEL horizontal_move_z=5 retry_tolerance=0.02 retries=10
        
        # Second pass - Fine adjustment
        _LOG_STATUS MSG="QGL fine pass (tolerance: 0.005mm)"
        _QUAD_GANTRY_LEVEL horizontal_move_z=2 retry_tolerance=0.005 retries=5

        # Home Z after leveling
        _LOG_STATUS MSG="QGL process completed, homing Z axis"
        G28 Z
        
        _LOG_STATUS MSG="QGL completed successfully"
    {% else %}
        _LOG_STATUS MSG="QGL already applied, skipping leveling process"
    {% endif %}
    
    RESTORE_GCODE_STATE NAME=STATE_QGL

[gcode_macro CLEAN_NOZZLE]
description: Clean nozzle using configurable temperature and wipe patterns
gcode:
    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE
    
    # Get cleaning parameters from global variables
    {% set cleaning_temp = printer['gcode_macro _global_var'].cleaning_temp|int %}
    {% set clean_pos = printer['gcode_macro _global_var'].cleaning_position %}
    {% set wipes = params.WIPES|default(5)|int %}
    
    _LOG_STATUS MSG="Starting nozzle cleaning sequence"
    
    # Home axes if necessary
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        # If not fully homed, check if X and Y are homed
        {% if not ('x' in printer.toolhead.homed_axes and 'y' in printer.toolhead.homed_axes) %}
            # If X or Y not homed, do full homing
            _LOG_STATUS MSG="Homing all axes for nozzle cleaning"
            G28
            _LOG_STATUS MSG="All axes homed successfully"
        {% else %}
            # If only X and Y are homed, check if Z is homed
            {% if not 'z' in printer.toolhead.homed_axes %}
                # If Z is not homed, home Z
                _LOG_STATUS MSG="Homing Z axis for nozzle cleaning"
                G28 Z
                _LOG_STATUS MSG="Z axis homed successfully"
            {% endif %}
        {% endif %}
    {% endif %}

    # Perform Z tilt adjust or QGL depending on printer configuration
    {% if ('z_tilt' in printer and not printer.z_tilt.applied) or ('quad_gantry_level' in printer and not printer.quad_gantry_level.applied) %}
        {% if 'z_tilt' in printer and not printer.z_tilt.applied %}
            _LOG_STATUS MSG="Performing Z-tilt adjustment for cleaning"
            Z_TILT_ADJUST
            # Only home Z if we performed Z-tilt
            G28 Z
            _LOG_STATUS MSG="Z-tilt adjustment completed"
        {% endif %}
        
        {% if 'quad_gantry_level' in printer and not printer.quad_gantry_level.applied %}
            _LOG_STATUS MSG="Performing Quad Gantry Level for cleaning"
            QUAD_GANTRY_LEVEL
            # No need for G28 Z here as QUAD_GANTRY_LEVEL already performs it
            _LOG_STATUS MSG="Quad Gantry Level completed"
        {% endif %}
    {% endif %}
    
    # Now proceed with nozzle cleaning sequence
    _LOG_STATUS MSG="Moving to cleaning position"
    G90 # Absolute positioning
    G1 X{clean_pos.x} Y{clean_pos.y} Z10 F7800 # Move to cleaning position with safe Z height
    
    _HEAT_FOR_FILAMENT TEMP={cleaning_temp} OPERATION="nozzle cleaning"
    
    G91 # Relative positioning
    G90 # Back to absolute positioning
    M106 S127 # Fan at 50%
    
    _LOG_STATUS MSG="Performing {wipes} cleaning cycles"
    
    # Combined cleaning pattern
    G1 X{clean_pos.x} Y{clean_pos.y} F7800 # Move to start position
    G1 Z{clean_pos.z} F300 # Lower to cleaning height
    
    # Main cleaning sequence
    {% for wipe in range(wipes) %} # Configurable wipe cycles
        # Progress update every 2 cycles
        {% if wipe % 2 == 0 %}
            _LOG_STATUS MSG="Cleaning cycle {wipe + 1}/{wipes}"
        {% endif %}
        
        # Straight wipes (now moving along X-axis)
        G1 X352 Y{clean_pos.y} F7800 # Forward wipe (right)
        G1 X{clean_pos.x} Y{clean_pos.y} F7800 # Backward wipe (left)
        
        # Zigzag pattern
        G1 Y362 X332 F7800 # Diagonal forward
        G1 Y360 X336 F7800 # Middle point
        G1 Y{clean_pos.y} X352 F7800 # Diagonal back
        
        # Constant pressure cleaning
        G1 Y362 X{clean_pos.x} F7800 # Forward wipe
        G1 Y{clean_pos.y} X332 F7800 # Return wipe
    {% endfor %}
    
    # Final cleanup moves
    G1 Y363 X{clean_pos.x} F7800 # Move away from cleaning area
    M400 # Wait for moves to complete
    _LOG_STATUS MSG="Nozzle cleaning completed"
    M107 # Turn off fan
    
    # Return to safe position
    _LOG_STATUS MSG="Returning to safe position"
    G91 # Relative positioning
    G1 Z10 F300 # Raise nozzle
    G90 # Absolute positioning
    G28 Z # Home Z
       
    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_STATE

# ==================== FILAMENT MANAGEMENT ====================
# Helper macro for filament operations heating
[gcode_macro _HEAT_FOR_FILAMENT]
gcode:
    {% set target_temp = params.TEMP|int %}
    {% set operation = params.OPERATION|default("filament operation")|string %}
    
    _LOG_STATUS MSG="Heating nozzle to {target_temp}Â°C for {operation}"
    M104 S{target_temp}
    M109 S{target_temp}
    _LOG_STATUS MSG="Nozzle ready for {operation}"

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set load_amount = 75 %}  # Could move to global vars if needed
    {% set load_prime = printer['gcode_macro _global_var'].load_prime_amount|float %}

    {% if printer.print_stats.state != "printing" %}
        {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}
        
        # Use helper macro for heating
        _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament loading"
    
        _LOG_STATUS MSG="Loading {load_amount}mm of filament"
        G91 
        G1 E{load_amount} F300
        G1 E{load_prime} F150
        G1 E-2 F300
        G90
        M400
        _LOG_STATUS MSG="Filament loaded successfully"
        M400
    
        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot load filament during printing"
    {% endif %}
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set filament_change_retract = printer['gcode_macro _global_var'].filament_change_retract|float %}
    {% set unload_retract = printer['gcode_macro _global_var'].unload_retract_amount|float %}
    {% set target = extruder_temp if printer.extruder.target == 0 else printer.extruder.target %}

    {% if printer.print_stats.state != "printing" %}
        # Use helper macro for heating
        _HEAT_FOR_FILAMENT TEMP={target} OPERATION="filament unloading"

        _LOG_STATUS MSG="Unloading filament using {unload_retract}mm retraction"
        G91
        G1 E+{filament_change_retract} F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-{unload_retract} F300 
        G90
        M400
        _LOG_STATUS MSG="Filament unloaded successfully"
        M400

        {% if printer.print_stats.state != "paused" %}
            M104 S0
        {% endif %}
    {% else %}
        _LOG_ERROR MSG="Cannot unload filament during printing"
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

# ==================== UTILITY MACROS ====================
# Bring the nozzle to the center of the bed
[gcode_macro CENTER]
gcode:
    G0  X175 Y175 F5000

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      _LOG_WARNING MSG="No operations in 10 minutes - printer idle"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

# ==================== FAN CONTROL ====================
[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    # Run the exhaust fan for another 2min after the other fans and then turn it off
    UPDATE_DELAYED_GCODE ID=exhaust_fan_off DURATION=120
    M107

# ==================== TEMPERATURE CONTROL OVERRIDES ====================
[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+8}   
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 S{s}
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+3}  
    {% endif %}

# ==================== DELAYED GCODE / HELPER MACROS ====================
[delayed_gcode exhaust_fan_off]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

# ==================== ORCASLICER CHAMBER COMPATIBILITY ====================
# Add these macros to enable OrcaSlicer chamber temperature support

[gcode_macro M141]
description: Set chamber temperature (passive heating via bed/exhaust fan)
gcode:
    {% set target_temp = params.S|default(0)|float %}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating disabled"
        SET_GCODE_VARIABLE MACRO=_CHAMBER_CONTROL VARIABLE=target_temp VALUE=0
    {% else %}
        _LOG_STATUS MSG="Chamber target temperature set to {target_temp}Â°C"
        SET_GCODE_VARIABLE MACRO=_CHAMBER_CONTROL VARIABLE=target_temp VALUE={target_temp}
    {% endif %}

[gcode_macro M191]
description: Wait for chamber temperature (passive heating)
gcode:
    {% set target_temp = params.S|default(0)|float %}
    {% if target_temp == 0 %}
        _LOG_STATUS MSG="Chamber heating cancelled"
    {% else %}
        # Start the prep timer here since chamber heating happens before START_PRINT
        {% if not printer['gcode_macro _PREPRINT_TIMER'].is_timing %}
            _START_PREPRINT_TIMER
        {% endif %}
        # Get a reasonable bed temperature for chamber heating
        {% set current_bed_target = printer.heater_bed.target %}
        {% set bed_temp_for_chamber = 85 %}  # Default fallback
        
        # If bed target is reasonable, use it; otherwise use smart fallback
        {% if current_bed_target > 70 %}
            {% set bed_temp_for_chamber = current_bed_target %}
        {% elif target_temp >= 40 %}
            {% set bed_temp_for_chamber = 100 %}  # High chamber temp needs hot bed
        {% elif target_temp == 35 %}
            {% set bed_temp_for_chamber = 100 %}  # ASA chamber heating needs 100Â°C bed
        {% elif target_temp >= 30 %}
            {% set bed_temp_for_chamber = 85 %}   # Medium chamber temp
        {% endif %}
        
        # Use our existing heat soak logic for passive chamber heating
        _PASSIVE_CHAMBER_HEAT TARGET={target_temp} BED_TEMP={bed_temp_for_chamber}
    {% endif %}

[gcode_macro _CHAMBER_CONTROL]
description: Chamber control state variable
variable_target_temp: 0
gcode:
    # Variable storage only

[gcode_macro _PASSIVE_CHAMBER_HEAT]
description: Passive chamber heating using bed and circulation
gcode:
    {% set target_temp = params.TARGET|float %}
    {% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target)|int %}
    {% set current_temp = printer["temperature_sensor chamber"].temperature %}
        
    {% if current_temp >= target_temp %}
        _LOG_STATUS MSG="Chamber already at {current_temp|round(1)}Â°C (target: {target_temp}Â°C)"
    {% else %}
        _LOG_STATUS MSG="Passive chamber heating from {current_temp|round(1)}Â°C to {target_temp}Â°C using {bed_temp}Â°C bed"
        
        # Use the target bed temp for chamber heating
        {% if bed_temp > 70 %}
            _LOG_STATUS MSG="Using {bed_temp}Â°C bed temperature to assist chamber heating"
            M140 S{bed_temp}  # Use the actual target bed temp
        {% else %}
            _LOG_STATUS MSG="Increasing bed temperature to assist chamber heating"
            M140 S85  # Fallback temp for low bed temps
        {% endif %}
        
        # Start exhaust fan for air circulation
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.3
        
        # Wait for chamber temperature
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_temp}
        
        # Stop circulation fan
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0
        
        _LOG_STATUS MSG="Chamber reached target temperature"
    {% endif %}